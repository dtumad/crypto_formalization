import analysis.asymptotics.asymptotics
import data.polynomial
import data.real.nnreal
import analysis.special_functions.polynomials
import analysis.special_functions.exp_log

universes u v

open_locale nnreal

open asymptotics

section to_mathlib
-- General facts that should probably be ported to mathlib eventually

lemma is_O_at_top_iff {Œ± Œ≤ Œ≥ : Type*} [nonempty Œ±]
  [semilattice_sup Œ±] [semilattice_sup Œ≤] [semilattice_sup Œ≥]
  [has_norm Œ≤] [has_norm Œ≥] (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) :
  is_O f g filter.at_top ‚Üî ‚àÉ M x‚ÇÄ, ‚àÄ x, x‚ÇÄ ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ M * ‚à•g x‚à• :=
by simp only [is_O_iff, filter.eventually_at_top]

lemma is_O_of_pow_le {Œ± ùïú : Type*} [normed_linear_ordered_field ùïú] {l : filter Œ±}
  {f : Œ± ‚Üí ùïú} (hf : ‚àÄ·∂† x in l, ‚à•f x‚à• ‚â• 1) {n m : ‚Ñï} (hnm : n ‚â§ m) :
  is_O (Œª x, (f x) ^ n) (Œª x, (f x) ^ m) l :=
begin
  rw is_O_iff,
  refine ‚ü®1, filter.eventually_of_mem hf (Œª x hx, _)‚ü©,
  simp only [one_mul, normed_field.norm_pow],
  refine pow_le_pow hx hnm,
end 

end to_mathlib

section poly_growth
open polynomial

/-- TODO: Define this better -/
def negligable {Œ± R : Type u} [normed_ring R] [preorder Œ±] (f : Œ± ‚Üí R) :=
filter.tendsto f filter.at_top (nhds 0)

/-- Predicate for functions that have polynomial growth -/
def poly_growth {R : Type u} [normed_ring R] [preorder R] (f : R ‚Üí R) :=
‚àÉ (p : polynomial R), is_O f (Œª a, eval a p) filter.at_top

variables {R : Type u} [normed_ring R] [preorder R]

@[simp] lemma poly_growth_const (b : R) : poly_growth (Œª _, b) :=
‚ü®C b, is_O_of_le filter.at_top (Œª x, by simp)‚ü©

@[simp] lemma poly_growth_one : poly_growth (1 : R ‚Üí R) :=
poly_growth_const 1

@[simp] lemma poly_growth_zero : poly_growth (0 : R ‚Üí R) :=
poly_growth_const 0

@[simp] lemma poly_growth_id : poly_growth (id : R ‚Üí R) :=
‚ü®X, is_O_of_le filter.at_top (Œª x, by simp)‚ü©

variables {ùïú : Type u} [normed_linear_ordered_field ùïú] [order_topology ùïú]

lemma poly_growth_mul {f g : ùïú ‚Üí ùïú} (hf : poly_growth f)
  (hg : poly_growth g) : poly_growth (f * g) :=
let ‚ü®p, hp‚ü© := hf, ‚ü®q, hq‚ü© := hg in 
  ‚ü®p * q, by simpa using is_O.mul hp hq‚ü©

lemma poly_growth_pow {f : ùïú ‚Üí ùïú} (hf : poly_growth f) (n : ‚Ñï) :
  poly_growth (f ^ n) :=
nat.rec_on n ((pow_zero f).symm ‚ñ∏ poly_growth_one)
  (Œª n hn, (pow_succ f n).symm ‚ñ∏ poly_growth_mul hf hn)

lemma poly_growth_iff_is_O_monomial (f : ùïú ‚Üí ùïú) :
  poly_growth f ‚Üî ‚àÉ (n : ‚Ñï), is_O f (Œª b, b ^ n) filter.at_top :=
‚ü®Œª h, let ‚ü®p, hp‚ü© := h in ‚ü®p.nat_degree, is_O.trans hp (is_O.trans
  (is_O_of_degree_le p (X ^ p.nat_degree) (by simp)) (by simp [is_O_refl]))‚ü©, 
Œª h, let ‚ü®n, hn‚ü© := h in ‚ü®X ^ n, is_O.trans hn (is_O_of_le filter.at_top (Œª x, by simp))‚ü©‚ü©

lemma poly_growth_add {f g : ùïú ‚Üí ùïú} (hf : poly_growth f)
  (hg : poly_growth g) : poly_growth (f + g) :=
let ‚ü®p, hp‚ü© := hf, ‚ü®q, hq‚ü© := hg in
begin
  by_cases hpq : p = 0 ‚à® q = 0,
  { cases hpq with hp0 hq0,
    { simp only [hp0, eval_zero] at hp,
      refine ‚ü®q, is_O.add (is_O.trans hp (is_O_zero _ _)) hq‚ü© },
    { simp only [hq0, eval_zero] at hq,
      refine ‚ü®p, is_O.add hp (is_O.trans hq (is_O_zero _ _))‚ü© } },
  { rw not_or_distrib at hpq,
    refine ‚ü®p * q, is_O.add (is_O.trans hp (is_O_of_degree_le p (p * q) (degree_le_mul_left _ hpq.2)))
      (is_O.trans hq (is_O_of_degree_le q (p * q) (mul_comm q p ‚ñ∏ (degree_le_mul_left _ hpq.1))))‚ü© }
end

end poly_growth

section log_poly_growth
open polynomial
open real

def log_poly_growth (f : ‚Ñù ‚Üí ‚Ñù) := 
‚àÉ (k : ‚Ñï), is_O f (Œª a, (log a) ^ k) filter.at_top

lemma log_poly_growth_iff (f : ‚Ñù ‚Üí ‚Ñù) :
  log_poly_growth f ‚Üî ‚àÉ (k : ‚Ñï), is_O f (Œª a, (log a) ^ k) filter.at_top :=
iff.rfl

lemma log_poly_growth_iff_is_O_log_pow (f : ‚Ñù ‚Üí ‚Ñù) :
  log_poly_growth f ‚Üî ‚àÉ (p : polynomial ‚Ñù), is_O f (Œª a, eval (log a) p) filter.at_top :=
begin
  refine ‚ü®Œª h, let ‚ü®k, hk‚ü© := h in ‚ü®X ^ k, by simpa only [eval_X, eval_pow]‚ü©, _‚ü©,
  rintro ‚ü®p, hp‚ü©,
  refine ‚ü®p.nat_degree, is_O.trans hp _‚ü©,
  suffices : is_O ((Œª a, eval a p) ‚àò log) ((Œª a, eval a (X ^ p.nat_degree)) ‚àò log) filter.at_top,
  by simpa using this,
  exact is_O.comp_tendsto (polynomial.is_O_of_degree_le _ _ (by simp)) tendsto_log_at_top,
end

@[simp] lemma log_poly_growth_const (b : ‚Ñù) : log_poly_growth (Œª _, b) :=
‚ü®0, by simpa using is_O_const_const b (zero_ne_one.symm : (1 : ‚Ñù) ‚â† 0) filter.at_top‚ü©

@[simp] lemma log_poly_growth_one : log_poly_growth 1 :=
log_poly_growth_const 1

@[simp] lemma log_poly_growth_zero : log_poly_growth 0 :=
log_poly_growth_const 0

@[simp] lemma log_poly_growth_log : log_poly_growth real.log :=
‚ü®1, by simp [is_O_refl]‚ü©

lemma log_poly_growth_mul {f g : ‚Ñù ‚Üí ‚Ñù} (hf : log_poly_growth f)
  (hg : log_poly_growth g) : log_poly_growth (f * g) :=
let ‚ü®a, ha‚ü© := hf, ‚ü®b, hb‚ü© := hg in 
  ‚ü®a + b, by simpa [pow_add] using is_O.mul ha hb‚ü©

lemma log_poly_growth_pow {f : ‚Ñù ‚Üí ‚Ñù} (hf : log_poly_growth f) (n : ‚Ñï) :
  log_poly_growth (f ^ n) :=
nat.rec_on n ((pow_zero f) ‚ñ∏ log_poly_growth_one)
  (Œª n hn, (pow_succ f n) ‚ñ∏ log_poly_growth_mul hf hn)

lemma log_ge_of_ge_exp {x y : ‚Ñù} (h : x ‚â• exp y) : log x ‚â• y :=
calc y = log (exp y) : (log_exp y).symm
      ... ‚â§ log x : (log_le_log (exp_pos y) (lt_of_lt_of_le (exp_pos y) h)).mpr h

theorem log_poly_growth_add {f g : ‚Ñù ‚Üí ‚Ñù} (hf : log_poly_growth f)
  (hg : log_poly_growth g) : log_poly_growth (f + g) :=
let ‚ü®a, ha‚ü© := hf, ‚ü®b, hb‚ü© := hg in 
have hx : ‚àÄ·∂† (x : ‚Ñù) in filter.at_top, ‚à•log x‚à• ‚â• 1 := 
  filter.eventually_at_top.mpr ‚ü®exp 1, Œª x hx, le_abs.mpr (or.inl (log_ge_of_ge_exp hx))‚ü©,
‚ü®max a b, is_O.add (is_O.trans ha (is_O_of_pow_le hx (le_max_left a b)))
  (is_O.trans hb (is_O_of_pow_le hx (le_max_right a b)))‚ü©

lemma log_le_of_nonneg {x : ‚Ñù} (hx : x ‚â• 0) : log x ‚â§ x :=
begin
  cases lt_or_eq_of_le hx with hx' hx',
  { calc log x ‚â§ log (exp x) : (log_le_log hx' (exp_pos x)).mpr 
        (trans (by linarith) (add_one_le_exp_of_nonneg hx))
      ... = x : by simp },
  { simp [‚Üê hx'] }
end

lemma neg_log_le_of_nonneg {x : ‚Ñù} (hx : x ‚â• 1) : - log x ‚â§ x :=
calc - log x ‚â§ 0 : neg_nonpos.mpr $ log_nonneg hx
        ... ‚â§ 1 : zero_le_one
        ... ‚â§ x : hx

theorem poly_growth_of_log_poly_growth {f : ‚Ñù ‚Üí ‚Ñù} (hf : log_poly_growth f) :
  poly_growth f :=
begin
  obtain ‚ü®k, hk‚ü© := hf,
  refine ‚ü®X ^ k, is_O.trans hk _‚ü©,
  simp only [eval_X, eval_pow],
  rw is_O_iff,
  refine ‚ü®1, _‚ü©,
  rw filter.eventually_at_top,
  refine ‚ü®1, Œª x hx, _‚ü©,
  simp [real.norm_eq_abs],
  by_cases hk : k = 0,
  { simp [hk] },
  { refine pow_le_pow_of_le_left (abs_nonneg (log x)) (abs_le_abs _ _) k,
    { refine log_le_of_nonneg (by linarith) },
    { refine neg_log_le_of_nonneg (by linarith) } } 
end

end log_poly_growth