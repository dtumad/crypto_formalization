import data.bitvec.basic
import measure_theory.probability_mass_function
import analysis.special_functions.exp_log
import analysis.asymptotics.asymptotics
import analysis.special_functions.polynomials

-- Collection of random statements that maybe should eventually move to mathlib

lemma ite_le {A : Type*} [has_le A] {a b c : A} (p : Prop) [decidable p]
  (hab : b ‚â§ a) (hac : c ‚â§ a) : ite p b c ‚â§ a :=
by split_ifs; assumption

section asymptotics

open asymptotics

lemma is_O_of_pow_le {Œ± ùïú : Type*} [normed_field ùïú] {l : filter Œ±}
  {f : Œ± ‚Üí ùïú} (hf : ‚àÄ·∂† x in l, ‚à•f x‚à• ‚â• 1) {n m : ‚Ñï} (hnm : n ‚â§ m) :
  is_O (Œª x, (f x) ^ n) (Œª x, (f x) ^ m) l :=
begin
  rw is_O_iff,
  refine ‚ü®1, filter.eventually_of_mem hf (Œª x hx, _)‚ü©,
  simp only [one_mul, normed_field.norm_pow],
  refine pow_le_pow hx hnm,
end 

end asymptotics

def decidable_eq_of_prod_left {A B : Type*} [inhabited B] [h : decidable_eq (A √ó B)] : 
  decidable_eq A :=
Œª a a', decidable.rec (Œª h, is_false (Œª h', h (prod.mk.inj_iff.mpr ‚ü®h', rfl‚ü©))) 
  (Œª h, is_true (prod.mk.inj_iff.mp h).1) (h ‚ü®a, arbitrary B‚ü© ‚ü®a', arbitrary B‚ü©)

@[simp] lemma card_bitvec {n : ‚Ñï} : fintype.card (bitvec n) = 2 ^ n :=
by rw [card_vector n, fintype.card_bool]

section const_pmf

lemma sum_inv_fintype_card_eq_one {A : Type*} [fintype A] [inhabited A] :
  has_sum (Œª (a : A), (fintype.card A : nnreal)‚Åª¬π) 1 :=
begin
  convert has_sum_fintype (Œª (a : A), (fintype.card A : nnreal)‚Åª¬π),
  rw [finset.sum_const, nsmul_eq_mul],
  refine (div_self _).symm,
  exact nat.cast_ne_zero.2 (finset.card_ne_zero_of_mem (by simp : arbitrary A ‚àà _)),
end

/-- Definition of a uniform `pmf` on a finite type -/
noncomputable def pmf.const (Œ± : Type*) [fintype Œ±] [inhabited Œ±] : pmf Œ± :=
‚ü®Œª a, (fintype.card Œ± : nnreal)‚Åª¬π, sum_inv_fintype_card_eq_one‚ü©

@[simp] lemma pmf.const_apply {Œ± : Type*} [fintype Œ±] [inhabited Œ±]
  (a : Œ±) : pmf.const Œ± a = (fintype.card Œ± : nnreal)‚Åª¬π := rfl

lemma card_ne_zero_of_inhabited {Œ± : Type*} [fintype Œ±] [inhabited Œ±] : 
  fintype.card Œ± ‚â† 0 :=
finset.card_ne_zero_of_mem (finset.mem_univ (arbitrary Œ±))

end const_pmf

section log_exp

open real

lemma log_le_of_nonneg {x : ‚Ñù} (hx : x ‚â• 0) : log x ‚â§ x :=
begin
  cases lt_or_eq_of_le hx with hx' hx',
  { calc log x ‚â§ log (exp x) : (log_le_log hx' (exp_pos x)).mpr 
        (trans (by linarith) (add_one_le_exp_of_nonneg hx))
      ... = x : by simp },
  { simp [‚Üê hx'] }
end

lemma neg_log_le_of_nonneg {x : ‚Ñù} (hx : x ‚â• 1) : - log x ‚â§ x :=
calc - log x ‚â§ 0 : neg_nonpos.mpr $ log_nonneg hx
        ... ‚â§ 1 : zero_le_one
        ... ‚â§ x : hx

lemma one_eventually_le_log : ‚àÄ·∂† (x : ‚Ñù) in filter.at_top, 1 ‚â§ ‚à•real.log x‚à• :=
begin
  simp only [filter.eventually_at_top, ge_iff_le],
  refine ‚ü®real.exp 1, Œª x hx, _‚ü©,
  suffices : 1 ‚â§ real.log x,
  from real.norm_eq_abs (real.log x) ‚ñ∏ le_abs.2 (or.inl this),
  rwa [‚Üê real.log_exp 1, real.log_le_log (real.exp_pos 1) (lt_of_lt_of_le (real.exp_pos 1) hx)],
end

lemma log_ge_of_ge_exp {x y : ‚Ñù} (h : x ‚â• real.exp y) : real.log x ‚â• y :=
calc y = real.log (real.exp y) : (real.log_exp y).symm
      ... ‚â§ real.log x : (real.log_le_log (real.exp_pos y) (lt_of_lt_of_le (real.exp_pos y) h)).mpr h


end log_exp

-- lemma fpow_pos_of_pos {n : ‚Ñù} (hn : 0 < n) (c : ‚Ñ§) : 0 < n ^ c :=
-- begin
  
-- end